*** Yaremko SQL Requests ***

1. Написать запрос, считающий суммарное количество имеющихся на сайте новостей и обзоров.

SELECT SUM(num) as sum
FROM (
SELECT COUNT(*) AS num
FROM news
UNION 
SELECT COUNT(*)
FROM reviews
) AS t1

2. Написать запрос, показывающий список категорий новостей и количество новостей в каждой категории.

SELECT nc_name, COUNT(n_id) AS news_num
FROM news_categories
LEFT JOIN news ON news.n_category = news_categories.nc_id
GROUP BY nc_name

3. Написать запрос, показывающий список категорий обзоров и количество обзоров в каждой категории.

SELECT rc_name, COUNT(r_id) AS reviews_num
FROM reviews_categories LEFT JOIN reviews ON reviews_categories.rc_id = reviews.r_category
GROUP BY rc_name

4. Написать запрос, показывающий список категорий новостей, категорий обзоров и дату самой свежей публикации в каждой категории.

SELECT nc_name AS category_name, MAX(n_dt) AS recent_publication
FROM news_categories INNER JOIN news ON news_categories.nc_id = news.n_category
GROUP BY nc_name
UNION ALL
SELECT rc_name, MAX(r_dt)
FROM reviews_categories INNER JOIN reviews ON reviews_categories.rc_id = reviews.r_category
GROUP BY rc_name

5.  Написать запрос, показывающий список страниц сайта верхнего уровня (у таких страниц нет родительской страницы) и список баннеров для каждой такой страницы.

--First variant

SELECT p_name, banners.b_id, b_url
FROM pages INNER JOIN m2m_banners_pages USING (p_id) INNER JOIN banners USING (b_id)
WHERE p_parent IS NULL

--Second variant

SELECT p_name, banners.b_id, b_url
FROM (pages LEFT JOIN m2m_banners_pages ON pages.p_id = m2m_banners_pages.p_id ) LEFT JOIN banners ON m2m_banners_pages.b_id = banners.b_id
WHERE p_parent IS NULL

6.  Написать запрос, показывающий список страниц сайта, на которых есть баннеры.

--First variant

SELECT DISTINCT p_name
FROM pages
INNER JOIN m2m_banners_pages USING(p_id)

--Second variant

SELECT p_name
FROM pages
WHERE p_id IN (SELECT p_id
        FROM m2m_banners_pages)


7.  Написать запрос, показывающий список страниц сайта, на которых нет баннеров.

SELECT p_name
FROM pages
WHERE p_id NOT 
IN (SELECT p_id
        FROM m2m_banners_pages)

8.  Написать запрос, показывающий список баннеров, размещённых хотя бы на одной странице сайта.

SELECT b_id, b_url
FROM banners
WHERE b_id
IN (SELECT b_id
    FROM m2m_banners_pages)

 9.  Написать запрос, показывающий список баннеров, не размещённых ни на одной странице сайта.

SELECT b_id, b_url
FROM banners
WHERE b_id
NOT IN (SELECT b_id
    FROM m2m_banners_pages)

10. Написать запрос, показывающий баннеры, для которых отношение кликов к показам >= 80% (при условии, что баннер был показан хотя бы один раз).

SELECT * 
FROM ( SELECT b_id, b_url, b_click / b_show *100 AS rate
       FROM banners
       WHERE b_show != 0
     ) AS t1
WHERE t1.rate >= 80

11. Написать запрос, показывающий список страниц сайта, на которых показаны баннеры с текстом (в поле `b_text` не NULL).

SELECT DISTINCT p_name
FROM pages INNER JOIN m2m_banners_pages USING (p_id) INNER JOIN banners USING (b_id)
WHERE b_id NOT IN (SELECT b_id
                    FROM banners
                    WHERE b_text IS NULL)

12. Написать запрос, показывающий список страниц сайта, на которых показаны баннеры с картинкой (в поле `b_pic` не NULL).

SELECT DISTINCT p_name
FROM pages INNER JOIN m2m_banners_pages USING (p_id) INNER JOIN banners USING (b_id)
WHERE b_id NOT IN (SELECT b_id
                    FROM banners
                    WHERE b_pic IS NULL)

13. Написать запрос, показывающий список публикаций (новостей и обзоров) за 2011-й год.

-- UNION ALL - if n_header and r_header are the same

SELECT n_header AS header, n_dt AS date
FROM news
WHERE year(n_dt) = 2011
UNION ALL
SELECT r_header , r_dt
FROM reviews
WHERE year(r_dt) = 2011

14. Написать запрос, показывающий список категорий публикаций (новостей и обзоров), в которых нет публикаций.

-- UNION ALL - if n_header and r_header are the same

SELECT nc_name AS category
FROM news_categories
WHERE nc_id NOT IN (SELECT n_category
                    FROM news)
UNION ALL
SELECT rc_name
FROM reviews_categories
WHERE rc_id NOT IN (SELECT r_category
                    FROM reviews)

15. Написать запрос, показывающий список новостей из категории «Логистика» за 2012-й год.

SELECT n_header, n_dt
FROM news
WHERE year(n_dt) = 2012 AND n_category IN (SELECT nc_id
                                            FROM news_categories
                                            WHERE nc_name = "Логистика")

16. Написать запрос, показывающий список годов, за которые есть новости, а также количество новостей за каждый из годов.

SELECT year(n_dt) AS year, COUNT(*) AS publications_num
FROM news
GROUP BY year(n_dt)

17. Написать запрос, показывающий URL и id таких баннеров, где для одного и того же URL есть несколько баннеров.

-- First variant

SELECT t1.b_url, b_id
FROM banners INNER JOIN (SELECT b_url
      FROM banners
      GROUP BY b_url
      HAVING COUNT(DISTINCT b_id) > 1) AS t1 ON banners.b_url = t1.b_url

-- Second variant

SELECT b_url, b_id
FROM banners
WHERE b_url IN (SELECT b_url
                FROM banners
                GROUP BY b_url
                HAVING COUNT(DISTINCT b_id) > 1)


18. Написать запрос, показывающий список непосредственных подстраниц страницы «Юридическим лицам» со списком баннеров этих подстраниц.

SELECT p_name, b_id, b_url
FROM pages INNER JOIN m2m_banners_pages USING (p_id) INNER JOIN banners USING (b_id)
WHERE p_parent IN (SELECT p_id
                  FROM pages
                  WHERE p_name = "Юридическим лицам")

19. Написать запрос, показывающий список всех баннеров с картинками (поле `b_pic` не NULL), отсортированный по убыванию отношения кликов по баннеру к показам баннера.

SELECT b_id, b_url, b_click/nullif(b_show, 0) AS rate
FROM banners
WHERE b_pic IS NOT NULL
ORDER BY rate DESC

20. Написать запрос, показывающий самую старую публикацию на сайте (не важно – новость это или обзор).

SELECT header, date
FROM  (SELECT n_header AS header, n_dt AS date
      FROM news
      UNION
      SELECT r_header, r_dt
      FROM reviews) AS t1 
WHERE date = (SELECT MIN(n_dt)
              FROM (SELECT n_dt 
                    FROM news
                    UNION
                    SELECT r_dt
                    FROM reviews) AS t2)


21. Написать запрос, показывающий список баннеров, URL которых встречается в таблице один раз.

SELECT t1.b_url, b_id
FROM banners INNER JOIN (SELECT b_url
                        FROM banners
                        GROUP BY b_url
                        HAVING COUNT(*) = 1) AS t1 USING(b_url)

22. Написать запрос, показывающий список страниц сайта в порядке убывания количества баннеров, расположенных на странице. Для случаев, когда на нескольких страницах расположено одинаковое количество баннеров, этот список страниц должен быть отсортирован по возрастанию имён страниц.

SELECT p_name, banners_count
FROM pages INNER JOIN (SELECT p_id, COUNT(b_id) AS banners_count
                       FROM m2m_banners_pages
                       GROUP BY p_id) AS t1 USING (p_id)
ORDER BY banners_count DESC, p_name ASC

23. Написать запрос, показывающий самую «свежую» новость и самый «свежий» обзор.

SELECT n_header AS header, n_dt AS date
FROM news
WHERE n_dt = (SELECT MAX(n_dt)
              FROM news)
UNION
SELECT r_header, r_dt
FROM reviews
WHERE r_dt = (SELECT MAX(r_dt)
              FROM reviews)

24. Написать запрос, показывающий баннеры, в тексте которых встречается часть URL, на который ссылается баннер.

-- First variant
SELECT b_id, b_url, b_text
FROM banners
WHERE b_text != '' AND b_url LIKE CONCAT('%', nullif(LOWER(b_text), ''), '%')

-- Second variant

SELECT b_id, b_url, b_text
FROM banners
WHERE b_url LIKE CONCAT('%', nullif(LOWER(b_text), ''), '%')

25. Написать запрос, показывающий страницу, на которой размещён баннер с самым высоким отношением кликов к показам.

-- First variant

SELECT p_name
FROM pages INNER JOIN m2m_banners_pages USING (p_id) INNER JOIN banners USING (b_id)
WHERE b_click/nullif(b_show, 0) = (SELECT MAX(b_click/nullif(b_show, 0))
                       FROM banners)
LIMIT 1

-- Second variant

SELECT p_name
FROM pages INNER JOIN m2m_banners_pages USING (p_id) INNER JOIN banners USING (b_id)
ORDER BY b_click/nullif(b_show, 0) DESC
LIMIT 1

26. Написать запрос, считающий среднее отношение кликов к показам по всем баннерам, которые были показаны хотя бы один раз.

SELECT AVG(b_click/nullif(b_show, 0))
FROM banners
WHERE b_id IN (SELECT b_id
                FROM m2m_banners_pages)

27. Написать запрос, считающий среднее отношение кликов к показам по баннерам, у которых нет графической части (поле `b_pic` равно NULL).

SELECT AVG(b_click/nullif(b_show, 0))
FROM banners
WHERE b_pic IS NULL

28. Написать запрос, показывающий количество баннеров, размещённых на страницах сайта верхнего уровня (у таких страниц нет родительских страниц).

-- First variant: with taking into account same banners

SELECT COUNT(b_id) AS banners_num
FROM pages INNER JOIN m2m_banners_pages USING (p_id) INNER JOIN banners USING (b_id)
WHERE p_parent IS NULL

-- Second variant: with taking into account different banners

SELECT COUNT(DISTINCT b_id) AS banners_num
FROM pages INNER JOIN m2m_banners_pages USING (p_id) INNER JOIN banners USING (b_id)
WHERE p_parent IS NULL

29. Написать запрос, показывающий баннер(ы), который(ые) показаны на самом большом количестве страниц.

SELECT b_id, b_url, pages_num
FROM banners INNER JOIN (SELECT b_id, COUNT(DISTINCT p_id) AS pages_num
                        FROM m2m_banners_pages
                        GROUP BY b_id
                        HAVING COUNT(DISTINCT p_id) = (SELECT MAX(pages_number)
                                                       FROM (SELECT COUNT(DISTINCT p_id) AS pages_number
                                                             FROM m2m_banners_pages
                                                             GROUP BY b_id) AS t1)) AS t2 USING(b_id)

30. Написать запрос, показывающий страницу(ы), на которой(ых) показано больше всего баннеров.

SELECT p_name, banners_num
FROM pages INNER JOIN (SELECT p_id, COUNT(DISTINCT b_id) AS banners_num
                        FROM m2m_banners_pages
                        GROUP BY p_id
                        HAVING COUNT(DISTINCT b_id) = (SELECT MAX(banners_number)
                                                        FROM (SELECT COUNT(DISTINCT b_id) AS banners_number
                                                             FROM m2m_banners_pages
                                                             GROUP BY p_id) AS t1)) AS t2 USING (p_id)
